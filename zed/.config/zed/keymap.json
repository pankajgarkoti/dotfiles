// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    "context": "Workspace",
    "bindings": {}
  },
  {
    "context": "Editor",
    "bindings": {}
  },

  {
    "context": "Editor && mode == full && inline_completion",
    "bindings": {
      "alt-]": "editor::NextInlineCompletion",
      "alt-[": "editor::PreviousInlineCompletion",
      "cmd-right": "editor::AcceptPartialInlineCompletion",
      "ctrl-;": "editor::NextInlineCompletion",
      "ctrl-'": "editor::PreviousInlineCompletion",
      "ctrl-a": "editor::AcceptPartialInlineCompletion"
    }
  },
  {
    "context": "Editor && inline_completion && !showing_completions",
    "bindings": {
      "tab": "editor::AcceptInlineCompletion",
      "ctrl-a": "editor::AcceptInlineCompletion"
    }
  },
  {
    "context": "vim_mode == normal",
    "bindings": {
      "escape": "editor::Cancel",
      "ctrl-[": "editor::Cancel",
      ":": "command_palette::Toggle",
      ".": "vim::Repeat",
      "c": ["vim::PushOperator", "Change"],
      "shift-c": "vim::ChangeToEndOfLine",
      "d": ["vim::PushOperator", "Delete"],
      "shift-d": "vim::DeleteToEndOfLine",
      "shift-j": "vim::JoinLines",
      "y": ["vim::PushOperator", "Yank"],
      "shift-y": "vim::YankLine",
      "i": "vim::InsertBefore",
      "shift-i": "vim::InsertFirstNonWhitespace",
      "a": "vim::InsertAfter",
      "shift-a": "vim::InsertEndOfLine",
      "x": "vim::DeleteRight",
      "shift-x": "vim::DeleteLeft",
      "o": "vim::InsertLineBelow",
      "shift-o": "vim::InsertLineAbove",
      "~": "vim::ChangeCase",
      "ctrl-a": "vim::Increment",
      "ctrl-x": "vim::Decrement",
      "p": "vim::Paste",
      "shift-p": ["vim::Paste", { "before": true }],
      "u": "vim::Undo",
      "ctrl-r": "vim::Redo",
      "r": ["vim::PushOperator", "Replace"],
      "s": "vim::Substitute",
      "shift-s": "vim::SubstituteLine",
      ">": ["vim::PushOperator", "Indent"],
      "<": ["vim::PushOperator", "Outdent"],
      "g u": ["vim::PushOperator", "Lowercase"],
      "g shift-u": ["vim::PushOperator", "Uppercase"],
      "g ~": ["vim::PushOperator", "OppositeCase"],
      "\"": ["vim::PushOperator", "Register"],
      "g q": ["vim::PushOperator", "Rewrap"],
      "g w": ["vim::PushOperator", "Rewrap"],
      "ctrl-pagedown": "pane::ActivateNextItem",
      "ctrl-pageup": "pane::ActivatePrevItem",
      "insert": "vim::InsertBefore",
      // tree-sitter related commands
      "[ x": "editor::SelectLargerSyntaxNode",
      "] x": "editor::SelectSmallerSyntaxNode",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPrevDiagnostic",
      "] c": "editor::GoToHunk",
      "[ c": "editor::GoToPrevHunk",
      "g c": ["vim::PushOperator", "ToggleComments"],
      "space f s": "workspace::NewSearch",
      "space f f": "file_finder::Toggle",
      "space e": "project_panel::ToggleFocus",
      "space o": "outline::Toggle",
      "ctrl-g": "workspace::ToggleBottomDock"
    }
  },
  {
    "context": "AssistantPanel",
    "bindings": {
      "cmd-k c": "assistant::CopyCode",
      "cmd-g": "search::SelectNextMatch",
      "cmd-shift-g": "search::SelectPrevMatch",
      "alt-m": "assistant::ToggleModelSelector",
      "cmd-k h": "assistant::DeployHistory",
      "cmd-k l": "assistant::DeployPromptLibrary",
      "cmd-n": "assistant::NewContext"
    }
  }
]
